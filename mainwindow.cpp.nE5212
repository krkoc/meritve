#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QtSerialPort/QSerialPortInfo>
#include <QDebug>
#include <QFileDialog>
#include <QDateTime>

QT_USE_NAMESPACE
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    //make spinBoxL of 1
    comCounter=0;
    ui->setupUi(this);
    this->setWindowTitle("CNCK");
    calibWindow= new Calibration();
    filenameL="";
    timer = new QTimer;
    transmitTimer=new QTimer;
    transmitTimer->setSingleShot(true);
    transmitTimer->setInterval(10);
    timer->start(1020);
    ui->lineEditL->setDisabled(true);
    row_count=1;
    column_count=2;
    ui->tableWidgetL->setRowCount(row_count);
    ui->tableWidgetL->setColumnCount(column_count);
    table_width=ui->tableWidgetL->width();


    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
        ui->comComboL->addItem(info.portName());
    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
        ui->comComboR->addItem(info.portName());

    connect(ui->zajemiButtonL, SIGNAL(clicked()),this, SLOT(transaction()));

    connect(&threadL, SIGNAL(response(QString)), this, SLOT(showResponseL(QString)));
    connect(&threadR, SIGNAL(response(QString)), this, SLOT(showResponseR(QString)));

    connect(ui->calibrationButton_L, SIGNAL(clicked()), this, SLOT(calibrationDialog1()));
    connect(ui->calibrationButton_R, SIGNAL(clicked()), this, SLOT(calibrationDialog2()));

    connect(calibWindow->calibrateButton, SIGNAL(clicked()),this,SLOT(receiveCalibrationParameter()) );
    connect(ui->pushIzberiDat_L, SIGNAL(clicked()),this,SLOT(getFilenameL()) );

    connect(ui->lineEditL,SIGNAL(textChanged(QString)), this, SLOT(changeFileNameL(QString)));
    connect(ui->spinBoxL,SIGNAL(valueChanged(int)),this,SLOT(updateComMap()));
    connect(ui->spinBoxR,SIGNAL(valueChanged(int)),this,SLOT(updateComMap()));

    //connect(timer,SIGNAL(timeout()),this, SLOT(getThisValue()) );

    // connect(&thread, SIGNAL(error(QString)),this, SLOT(processError(QString)));
    // connect(&thread, SIGNAL(timeout(QString)),this, SLOT(processTimeout(QString)));
    trenutno=0;
    this->updateComMap();
    }

void MainWindow::calibrationDialog1()
{
    calibWindow->show();
    calibWindow->calibrationMode=1;
    this->side="left";
}

void MainWindow::calibrationDialog2()
{
    calibWindow->show();
    calibWindow->calibrationMode=1;
    this->side="right";
}


void MainWindow::receiveCalibrationParameter()
{
    //read real
    qDebug()<<"entering rcvval";
    if (this->side=="left"){
        threadL.transaction(ui->comComboL->currentText(),200,"?\r");
        qDebug()<<"receive calib param for right channel";
     }
    if (this->side=="right"){
        threadR.transaction(ui->comComboR->currentText(),200,"?\r");;
        qDebug()<<"receive calib param for right channel";
    }
}

void MainWindow::getThisValue()
{
    trenutno=1;
    calibWindow->calibrationMode=0;
    querryThread(map[comCounter]);
    //qDebug()<<"com counter in getthis"<<comCounter;
}




void MainWindow::updateComMap(){
    map.clear();
    comCounter=0;
    for (int i=0 ; i<ui->spinBoxL->value();i++){
        map[i]=1;
        row_count=i+1;
    }

    //add spinBoxR of 2
    for (int i=0 ; i<ui->spinBoxR->value();i++){
        map[i+ui->spinBoxL->value()]=2;
    }
    qDebug()<<map;
    resizeTable();
}



void MainWindow::transaction()
{
    disconnect(ui->zajemiButtonL, SIGNAL(clicked()),this, SLOT(transaction()));
    timer->stop();
    trenutno=0;
    calibWindow->calibrationMode=0;


    for (comCounter=0;comCounter < (map.size() );comCounter++) {
    transmitTimer->start();

        //   qDebug()<<"comCounter "<<comCounter<<"map[] "<<map[comCounter];
        if (map[comCounter]==1) this->port=1;
        if (map[comCounter]==2) this->port=2;
        qDebug()<<"map cc"<<map[comCounter];
        querryThread(map[comCounter]);
        while(transmitTimer->remainingTime()>0);
        transmitTimer->stop();

    }
    //if (comCounter>=(map.size()))
    //    comCounter=0;
}

void MainWindow::querryThread(int port){

    if (calibWindow->calibrationMode==0){
        if (port==1){
            this->port=1;
            threadL.transaction(ui->comComboL->currentText(),200,"?\r");

            // qDebug()<<"calling threadL";
        }
        else if (port==2){
            this->port=2;
            threadR.transaction(ui->comComboR->currentText(),200,"?\r");
            //qDebug()<<"calling threadR";
        }
    }
}



void MainWindow::showResponseL(const QString &s)
{
    qDebug()<<"raw data: "<<s;

    if (!calibWindow->calibrationMode)
    {
        //meritve...
        //tukaj bo prebral oba porta
        //pogledal kateri ustreza

        //in ga vpisal v ustrezni slot

        //je slot zaključen=

        //piši v datoteko




        double value;
        //    qDebug()<<"raw value"<<s;
        //    qDebug()<<"show response normal mode";
        if (this->port ==1){
            value=s.toDouble()+calibWindow->correctionL;
            qDebug()<<"port 1"<<value;
        }
        if (this->port==2){
            value=s.toDouble()+calibWindow->correctionR;
            qDebug()<<"port 2"<<value;
        }
        QDateTime datetime=QDateTime::currentDateTime();
        //write to file directly because it must exist if it hasn't been deleted meanwhile...TODO catch exception
        //if (filename!=""){
        if (trenutno==0){//gumb
           // if (comCounter==1){
           //     QString string=datetime.toString("dd.MM.yyyy")+" , "+datetime.toString("hh:mm:ss");
           //     ui->plainTextEditL->appendPlainText(string);
            //}
            ui->plainTextEditL->appendPlainText(QString::number(value));

            //if (comCounter==map.size())
            //    ui->plainTextEditL->appendPlainText("\n\r");
            //fileL.write((string+"\r\n").toUtf8());
            timer->start();
        }
        else if (trenutno==1){//timer
            ui->lineEditInstant->setText(QString::number(value));
            trenutno=0;
        }

    }
    else if (calibWindow->calibrationMode){ //calibration mode
        qDebug()<<"side before calibration"<<this->side;
        if (this->side=="left"){
            calibWindow->correctionL =-s.toDouble()+calibWindow->realValue->value();
            qDebug()<<"raw left"<<s;
            qDebug()<<"calibWindowRealVal"<<calibWindow->realValue->value();


        }
        else if (this->side=="right"){
            qDebug()<<"raw right"<<s;
            qDebug()<<"calibWindowRealVal"<<calibWindow->realValue->value();
            calibWindow->correctionR =-s.toDouble()+calibWindow->realValue->value();

        }
           qDebug()<<"calibration mode left"<<calibWindow->correctionL;
           qDebug()<<"calibration mode right"<<calibWindow->correctionR;
    }
    connect(ui->zajemiButtonL, SIGNAL(clicked()),this, SLOT(transaction()));
}




void MainWindow::processError(const QString &s)
{
   // setControlsEnabled(true);
   // statusLabel->setText(tr("Status: Not running, %1.").arg(s));
   // trafficLabel->setText(tr("No traffic."));
}

void MainWindow::processTimeout(const QString &s)
{
    //setControlsEnabled(true);
    //statusLabel->setText(tr("Status: Running, %1.").arg(s));
    //trafficLabel->setText(tr("No traffic."));
}


MainWindow::~MainWindow()
{
    //close all files before quitting
    delete ui;
}

void MainWindow::changeFileNameL(QString filename)
{
    //this gets called every time the file edit box changes
    //close opened files
    fileL.close();
    fileL.setFileName(filename);
    //open new file
    if (fileL.open(QIODevice::WriteOnly | QIODevice::Append)) {
        qDebug()<<"file"<< filenameL <<"opened";
    }
}


void MainWindow::getFilenameL()
{
    QFileDialog dialog;
    dialog.setFileMode(QFileDialog::AnyFile);
    filenameL=dialog.getSaveFileName(this,
        tr("Odri datoteko za pisanje"), "", tr("CSV (*.csv)") );
    ui->lineEditL->setText(filenameL);
}


void MainWindow::resizeTable()
{
    ui->tableWidgetL->setRowCount(row_count);

    ui->tableWidgetL->setColumnCount(column_count);
    ui->tableWidgetL->resize(table_width,(row_count+1)*ui->tableWidgetL->rowHeight(0));

}
